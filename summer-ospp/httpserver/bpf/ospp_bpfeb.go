// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type OSPPEndpointInfo struct {
	Ifindex uint32
	Mac     uint64
	NodeMac uint64
}

type OSPPLb4Key struct {
	Address     uint32
	BackendSlot uint32
}

type OSPPSimpleCtKey struct {
	SrcIp uint32
	DstIp uint32
}

// LoadOSPP returns the embedded CollectionSpec for OSPP.
func LoadOSPP() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_OSPPBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load OSPP: %w", err)
	}

	return spec, err
}

// LoadOSPPObjects loads OSPP and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*OSPPObjects
//	*OSPPPrograms
//	*OSPPMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadOSPPObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadOSPP()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// OSPPSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type OSPPSpecs struct {
	OSPPProgramSpecs
	OSPPMapSpecs
}

// OSPPSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type OSPPProgramSpecs struct {
	TcEgress      *ebpf.ProgramSpec `ebpf:"tc_egress"`
	TcIngress     *ebpf.ProgramSpec `ebpf:"tc_ingress"`
	TcIngressHost *ebpf.ProgramSpec `ebpf:"tc_ingress_host"`
}

// OSPPMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type OSPPMapSpecs struct {
	LocalPodMap *ebpf.MapSpec `ebpf:"local_pod_map"`
	SimpleCt    *ebpf.MapSpec `ebpf:"simple_ct"`
	SvcMap      *ebpf.MapSpec `ebpf:"svc_map"`
}

// OSPPObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadOSPPObjects or ebpf.CollectionSpec.LoadAndAssign.
type OSPPObjects struct {
	OSPPPrograms
	OSPPMaps
}

func (o *OSPPObjects) Close() error {
	return _OSPPClose(
		&o.OSPPPrograms,
		&o.OSPPMaps,
	)
}

// OSPPMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadOSPPObjects or ebpf.CollectionSpec.LoadAndAssign.
type OSPPMaps struct {
	LocalPodMap *ebpf.Map `ebpf:"local_pod_map"`
	SimpleCt    *ebpf.Map `ebpf:"simple_ct"`
	SvcMap      *ebpf.Map `ebpf:"svc_map"`
}

func (m *OSPPMaps) Close() error {
	return _OSPPClose(
		m.LocalPodMap,
		m.SimpleCt,
		m.SvcMap,
	)
}

// OSPPPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadOSPPObjects or ebpf.CollectionSpec.LoadAndAssign.
type OSPPPrograms struct {
	TcEgress      *ebpf.Program `ebpf:"tc_egress"`
	TcIngress     *ebpf.Program `ebpf:"tc_ingress"`
	TcIngressHost *ebpf.Program `ebpf:"tc_ingress_host"`
}

func (p *OSPPPrograms) Close() error {
	return _OSPPClose(
		p.TcEgress,
		p.TcIngress,
		p.TcIngressHost,
	)
}

func _OSPPClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ospp_bpfeb.o
var _OSPPBytes []byte
