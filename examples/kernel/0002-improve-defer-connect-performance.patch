From 96a05b5b3c287199739f8c26bb2ca75cc6540415 Mon Sep 17 00:00:00 2001
From: Di Zhu <zhudi2@huawei.com>
Date: Fri, 8 Apr 2022 16:45:19 +0800
Subject: [PATCH] improve defer connect performance

Signed-off-by: Di Zhu <zhudi2@huawei.com>
---
 include/uapi/linux/bpf.h |  1 +
 kernel/bpf/helpers.c     | 16 ++++++++++
 net/core/stream.c        | 16 +++++++---
 net/ipv4/af_inet.c       |  5 ++++
 net/ipv4/tcp.c           | 65 ++++++++++++++++++++++++++++++----------
 net/ipv4/tcp_ipv4.c      |  5 ++--
 6 files changed, 87 insertions(+), 21 deletions(-)

diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index 0573cda54..1d3baf952 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -3905,6 +3905,7 @@ union bpf_attr {
 	FN(strcmp),             \
 	FN(mem_replace),        \
         FN(strcpy),             \
+ 	FN(strnstr),		\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
diff --git a/kernel/bpf/helpers.c b/kernel/bpf/helpers.c
index e85249f67..b7cb413c0 100644
--- a/kernel/bpf/helpers.c
+++ b/kernel/bpf/helpers.c
@@ -678,6 +678,20 @@ const struct bpf_func_proto bpf_strstr_proto = {
     .arg2_type  = ARG_ANYTHING,
 };
 
+BPF_CALL_3(bpf_strnstr, void *, s1, void *, s2, size_t, len)
+{
+    return strnstr(s1, s2, len);
+}
+
+const struct bpf_func_proto bpf_strnstr_proto = {
+    .func       = bpf_strnstr,
+    .gpl_only   = false,
+    .ret_type   = RET_PTR_TO_ALLOC_MEM_OR_NULL,
+    .arg1_type  = ARG_ANYTHING,
+    .arg2_type  = ARG_ANYTHING,
+    .arg3_type  = ARG_ANYTHING,
+};
+
 BPF_CALL_2(bpf_strcmp, void *, str1, void *, str2)
 {
     return strcmp(str1, str2);
@@ -844,6 +858,8 @@ bpf_base_func_proto(enum bpf_func_id func_id)
         return &bpf_strchr_proto;
     case BPF_FUNC_strstr:
         return &bpf_strstr_proto;
+    case BPF_FUNC_strnstr:
+	return &bpf_strnstr_proto;
     case BPF_FUNC_strcmp:
         return &bpf_strcmp_proto;
     case BPF_FUNC_mem_replace:
diff --git a/net/core/stream.c b/net/core/stream.c
index 4f1d4aa5f..d629fdacd 100644
--- a/net/core/stream.c
+++ b/net/core/stream.c
@@ -61,14 +61,22 @@ int sk_stream_wait_connect(struct sock *sk, long *timeo_p)
 
 	do {
 		int err = sock_error(sk);
-		if (err)
+		if (err) {
+			printk(KERN_CRIT "[sk_stream_wait_connect]sock_error:%d\n", err);
 			return err;
-		if ((1 << sk->sk_state) & ~(TCPF_SYN_SENT | TCPF_SYN_RECV))
+		}
+		if ((1 << sk->sk_state) & ~(TCPF_SYN_SENT | TCPF_SYN_RECV)) {
+			printk(KERN_CRIT "[sk_stream_wait_connect]sk state:%d\n", sk->sk_state);
 			return -EPIPE;
-		if (!*timeo_p)
+		}
+		if (!*timeo_p) {
+			//printk(KERN_CRIT "[sk_stream_wait_connect]timeo:%d\n", *timeo_p);
 			return -EAGAIN;
-		if (signal_pending(tsk))
+		}
+		if (signal_pending(tsk)) {
+			//printk(KERN_CRIT "[sk_stream_wait_connect]signal_pending:%d\n", *timeo_p);
 			return sock_intr_errno(*timeo_p);
+		}
 
 		add_wait_queue(sk_sleep(sk), &wait);
 		sk->sk_write_pending++;
diff --git a/net/ipv4/af_inet.c b/net/ipv4/af_inet.c
index a8be4605b..91cc9204c 100644
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@ -658,6 +658,11 @@ int __inet_stream_connect(struct socket *sock, struct sockaddr *uaddr,
                 inet_sk(sk)->defer_connect = 2;
                 //printk(KERN_CRIT "[pre_connect]bpf defer connect, sk:%p, defer_conn:%u\n", sk, inet_sk(sk)->defer_connect);
                 err = 0;
+		sk->sk_dport = ((struct sockaddr_in *)uaddr)->sin_port;
+		sk_daddr_set(sk, ((struct sockaddr_in *)uaddr)->sin_addr.s_addr);
+		sock->state = SS_CONNECTING;
+		tcp_set_state(sk, TCP_SYN_SENT);
+		goto out;
             }
 			if (err)
 				goto out;
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index 4d119f786..06b5b138e 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -1224,6 +1224,18 @@ void tcp_defer_connect(struct sock *sk, struct inet_sock *inet_sk, int defer_con
     return;
 }
 
+#if 1
+void __user * kmalloc_user_memory(unsigned long size)
+{
+	return (void __user *)(current->mm->start_stack - 131072UL);
+}
+
+bool kfree_user_memory(void __user *buf, unsigned long size)
+{
+	return true;
+}
+
+#else
 //malloc userland memory in kernelspace
 void __user * kmalloc_user_memory(unsigned long size)
 {
@@ -1237,7 +1249,6 @@ void __user * kmalloc_user_memory(unsigned long size)
         printk("[err] kmalloc_user_memory failed!\n");
     return mm_buf;
 }
-
 /*
 * free the userland memory malloced by kmalloc_user_memory func
 *
@@ -1255,17 +1266,19 @@ bool kfree_user_memory(void __user *buf, unsigned long size)
     return (error==0);
 }
 
-static inline int tcp_defer_msg_build(struct msghdr *msg, struct msghdr *orgMsg, struct iovec *iov, void *buf, __u32 len)
+#endif
+
+static inline int tcp_defer_msg_build(struct msghdr *msg, struct msghdr *orgMsg, struct iovec *iov, void *buf, __u32 len, void __user *userBuf)
 {
     /* copy kernel buf to user buf */
     int err;
     __u32 oldLen;
-    void __user *userBuf = buf; //kmalloc_user_memory(len);
+    //void __user *userBuf = kmalloc_user_memory(len);
     void __user *oldUserPtr = NULL;
     if (!userBuf)
         return -1;
 
-    //copy_to_user(userBuf, buf, len);
+    copy_to_user(userBuf, buf, len);
 
     /* build defer msg */
     memcpy(msg, orgMsg, sizeof(struct msghdr));
@@ -1292,6 +1305,8 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
     struct bpf_mem_ptr tmpMem = {0};
     struct msghdr deferMsg;
 	struct iovec iov;
+	struct sockaddr_in addr_in;
+	void __user *userBuf;
 
 	flags = msg->msg_flags;
 
@@ -1311,18 +1326,23 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
     //tcp_defer_connect(sk, inet_sk(sk), inet_sk(sk)->defer_connect);
     if (unlikely(inet_sk(sk)->defer_connect == 2)) {
         //printk(KERN_CRIT "[tcp_sendmsg]bpf defer connect, sk:%p\n", sk);
-        inet_sk(sk)->defer_connect = 0;
-
         err = tcp_copy_msg_from_user(msg, &(tmpMem.ptr), &(tmpMem.size));
+	//err = inet_hash_connect(&sock_net(sk)->ipv4.tcp_death_row, sk);
         tcp_call_bpf_3arg(sk, BPF_SOCK_OPS_TCP_DEFER_CONNECT_CB, 
                           ((u64)(&tmpMem) & 0xffffffff), (((u64)(&tmpMem) >> 32) & 0xffffffff), tmpMem.size);
-        err = tcp_connect(sk);
+	addr_in.sin_family = AF_INET;
+	addr_in.sin_port = sk->sk_dport;
+	addr_in.sin_addr.s_addr = sk->sk_daddr;
+	err = tcp_v4_connect(sk, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
+        inet_sk(sk)->defer_connect = 0;
+        //err = tcp_connect(sk);
         //printk(KERN_CRIT "[tcp_sendmsg]tcp connect:%d\n", err);
-        //err = tcp_defer_msg_build(&deferMsg, msg, &iov, tmpMem.ptr, tmpMem.size);
+        userBuf = kmalloc_user_memory(tmpMem.size);
+        err = tcp_defer_msg_build(&deferMsg, msg, &iov, tmpMem.ptr, tmpMem.size, userBuf);
         //printk(KERN_CRIT "[tcp_sendmsg]defer msg build ret:%d, flag:%d\n", err, flags);
-        err = import_single_range(WRITE, (void __user *)tmpMem.ptr, tmpMem.size, &iov, &msg->msg_iter);
-        //msg = &deferMsg;
-        //kfree(tmpMem.ptr);
+        //err = import_single_range(WRITE, (void __user *)tmpMem.ptr, tmpMem.size, &iov, &msg->msg_iter);
+        msg = &deferMsg;
+        kfree(tmpMem.ptr);
         if (err) {
 	    printk(KERN_CRIT "[tcp_sendmsg]import_single_range failed:%d\n", err);
             tcp_set_state(sk, TCP_CLOSE);
@@ -1342,7 +1362,17 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 
 	timeo = sock_sndtimeo(sk, flags & MSG_DONTWAIT);
     if (msg == &deferMsg) {
-        timeo = 100;
+//	int i;
+//	for (i = 0; i < 10; i++) {
+//		if (((1 << READ_ONCE(sk->sk_state)) & ~(TCPF_ESTABLISHED | TCPF_CLOSE_WAIT))) {
+//			udelay(100);
+//			cpu_relax();
+//		} else {
+//			break;
+//		}
+//	}
+        //printk(KERN_CRIT "[tcp_sendmsg]set defer msg timeo 100\n");
+	timeo = 1;
     }
 
 	tcp_rate_check_app_limited(sk);  /* is sending application-limited? */
@@ -1354,8 +1384,10 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 	if (((1 << sk->sk_state) & ~(TCPF_ESTABLISHED | TCPF_CLOSE_WAIT)) &&
 	    !tcp_passive_fastopen(sk)) {
 		err = sk_stream_wait_connect(sk, &timeo);
-		if (err != 0)
+		if (err != 0) {
+			//printk(KERN_CRIT "[tcp_sendmsg]sk_stream_wait_connect failed:%d\n", err);
 			goto do_error;
+		}
 	}
 
 	if (unlikely(tp->repair)) {
@@ -1376,6 +1408,7 @@ int tcp_sendmsg_locked(struct sock *sk, struct msghdr *msg, size_t size)
 		err = sock_cmsg_send(sk, msg, &sockc);
 		if (unlikely(err)) {
 			err = -EINVAL;
+			printk(KERN_CRIT "[tcp_sendmsg]sock_cmsg_send failed:%d\n", err);
 			goto out_err;
 		}
 	}
@@ -1537,7 +1570,8 @@ out:
 out_nopush:
 	sock_zerocopy_put(uarg);
     if (msg == &deferMsg) {
-        
+        if (userBuf)
+		 kfree_user_memory(userBuf, tmpMem.size);
     }
 	return copied + copied_syn;
 
@@ -1557,7 +1591,8 @@ out_err:
 		tcp_chrono_stop(sk, TCP_CHRONO_SNDBUF_LIMITED);
 	}
     if (msg == &deferMsg) {
-        
+        if (userBuf)
+		 kfree_user_memory(userBuf, tmpMem.size);
     }
 	return err;
 }
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index 7e515a622..9dc0aae04 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -272,9 +272,12 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 	 * complete initialization after this.
 	 */
 	tcp_set_state(sk, TCP_SYN_SENT);
+	err = 0;
+    //if (inet_sk(sk)->defer_connect != 2) {
 	err = inet_hash_connect(tcp_death_row, sk);
 	if (err)
 		goto failure;
+    //}
 
 	sk_set_txhash(sk);
 
@@ -304,8 +307,6 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 
 	inet->inet_id = prandom_u32();
 
-    if (inet_sk(sk)->defer_connect == 2)
-        return err;
 	if (tcp_fastopen_defer_connect(sk, &err))
 		return err;
 	if (err)
-- 
2.30.0

